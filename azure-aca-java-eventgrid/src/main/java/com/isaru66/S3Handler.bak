package com.isaru66.azure_aca_blob_springboot;

import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.storage.blob.BlobClient;
import com.azure.storage.blob.BlobContainerClient;
import com.azure.storage.blob.BlobServiceClient;
import com.azure.storage.blob.BlobServiceClientBuilder;
import com.azure.storage.blob.models.BlobHttpHeaders;

import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.imageio.ImageIO;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.S3Event;
import com.amazonaws.services.lambda.runtime.events.models.s3.S3EventNotification.S3EventNotificationRecord;

public class S3Handler implements RequestHandler<S3Event, String> {
  private static final float MAX_DIMENSION = 100;
  private final String REGEX = ".*\\.([^\\.]*)";
  private final String JPG_TYPE = "jpg";
  private final String JPG_MIME = "image/jpeg";
  private final String PNG_TYPE = "png";
  private final String PNG_MIME = "image/png";

  @Override
  public String handleRequest(S3Event s3event, Context context) {
    LambdaLogger logger = context.getLogger();
    try {
      S3EventNotificationRecord record = s3event.getRecords().get(0);
      String srcBucket = record.getS3().getBucket().getName();

      // Object key may have spaces or unicode non-ASCII characters.
      String srcKey = record.getS3().getObject().getUrlDecodedKey();

      String dstBucket = System.getenv("DEST_BUCKET");
      if (dstBucket == null || dstBucket.isEmpty()) {
        throw new IllegalArgumentException("DEST_BUCKET environment variable is not set");
      }
      String dstKey = "resized-" + srcKey;
      // Infer the image type.
      Matcher matcher = Pattern.compile(REGEX).matcher(srcKey);
      if (!matcher.matches()) {
        logger.log("Unable to infer image type for key " + srcKey);
        return "";
      }
      String imageType = matcher.group(1);
      if (!(JPG_TYPE.equals(imageType)) && !(PNG_TYPE.equals(imageType))) {
        logger.log("Skipping non-image " + srcKey);
        return "";
      }
      // Download the image from Azure Blob Storage into a stream
      BlobServiceClient blobServiceClient = new BlobServiceClientBuilder()
          .endpoint(System.getenv("AZURE_BLOB_ENDPOINT"))
          .credential(new DefaultAzureCredentialBuilder().build())
          .buildClient();
      BlobContainerClient srcContainerClient = blobServiceClient.getBlobContainerClient(srcBucket);
      BlobClient srcBlobClient = srcContainerClient.getBlobClient(srcKey);
      InputStream blobInputStream = getObject(srcBlobClient);

      // Read the source image and resize it
      BufferedImage srcImage = ImageIO.read(blobInputStream);
      BufferedImage newImage = resizeImage(srcImage);

      // Re-encode image to target format
      ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
      ImageIO.write(newImage, imageType, outputStream);

      // Upload new image to Azure Blob Storage
      BlobContainerClient dstContainerClient = blobServiceClient.getBlobContainerClient(dstBucket);
      BlobClient dstBlobClient = dstContainerClient.getBlobClient(dstKey);
      putObject(dstBlobClient, outputStream, imageType, logger);

      logger.log("Successfully resized " + srcBucket + "/"
          + srcKey + " and uploaded to " + dstBucket + "/" + dstKey);
      return "Ok";
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  private InputStream getObject(BlobClient blobClient) throws IOException {
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    blobClient.downloadStream(outputStream);
    return new java.io.ByteArrayInputStream(outputStream.toByteArray());
  }

  private void putObject(BlobClient blobClient, ByteArrayOutputStream outputStream,
      String imageType, LambdaLogger logger) {
    BlobHttpHeaders headers = new BlobHttpHeaders();
    if (JPG_TYPE.equals(imageType)) {
      headers.setContentType(JPG_MIME);
    } else if (PNG_TYPE.equals(imageType)) {
      headers.setContentType(PNG_MIME);
    }
    logger.log("Writing to: " + blobClient.getBlobUrl());
    try {
      blobClient.upload(new java.io.ByteArrayInputStream(outputStream.toByteArray()), outputStream.size(), true);
      blobClient.setHttpHeaders(headers);
    } catch (Exception e) {
      logger.log(e.getMessage());
      System.exit(1);
    }
  }

  /**
   * Resizes (shrinks) an image into a small, thumbnail-sized image.
   * 
   * The new image is scaled down proportionally based on the source
   * image. The scaling factor is determined based on the value of
   * MAX_DIMENSION. The resulting new image has max(height, width)
   * = MAX_DIMENSION.
   * 
   * @param srcImage BufferedImage to resize.
   * @return New BufferedImage that is scaled down to thumbnail size.
   */
  private BufferedImage resizeImage(BufferedImage srcImage) {
    int srcHeight = srcImage.getHeight();
    int srcWidth = srcImage.getWidth();
    // Infer scaling factor to avoid stretching image unnaturally
    float scalingFactor = Math.min(
        MAX_DIMENSION / srcWidth, MAX_DIMENSION / srcHeight);
    int width = (int) (scalingFactor * srcWidth);
    int height = (int) (scalingFactor * srcHeight);

    BufferedImage resizedImage = new BufferedImage(width, height,
        BufferedImage.TYPE_INT_RGB);
    Graphics2D graphics = resizedImage.createGraphics();
    // Fill with white before applying semi-transparent (alpha) images
    graphics.setPaint(Color.white);
    graphics.fillRect(0, 0, width, height);
    // Simple bilinear resize
    graphics.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
        RenderingHints.VALUE_INTERPOLATION_BILINEAR);
    graphics.drawImage(srcImage, 0, 0, width, height, null);
    graphics.dispose();
    return resizedImage;
  }
}